@inject IHttpClientFactory HttpClient;
@inject IJSRuntime Js;
@inject IBasketService BasketService;
@*@inherits Nupp.Services.CatalogItemsBase*@
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Nupp.Services

@inherits Views.Home.Button.CatalogItemBase
<style type="text/css">
    .esh-catalog-button-add {
        background-color: #83D01B;
        border: 0;
        color: #FFFFFF;
        cursor: pointer;
        font-size: 1rem;
        height: 3rem;
        margin-top: 1rem;
        transition: all 0.35s;
        width: 80%;
    }

    .esh-catalog-button-remove {
        background-color: #990000;
        border: 0;
        color: #FFFFFF;
        cursor: pointer;
        font-size: 1rem;
        height: 3rem;
        margin-top: 1rem;
        transition: all 0.35s;
        width: 80%;
    }
</style>

@if (Product.ProductsInUserBasket == 0)
{
    <input class="esh-catalog-button-add" @onclick="@AddToBasketChanged" value="Lisa ostukorvi" />
}
else if (Product.ProductsInUserBasket > 0)
{
    <input class="esh-catalog-button-remove" @onclick="@RemoveBasketChanged"
           type="submit" value="Eemalda" />
    <input class="esh-catalog-button-add" @onclick="@AddToBasketChanged"
           type="submit" value="Lisa" />
    // TODO two-buttons with add and remove buttons. Different colors.
}

@code {
    /*[Parameter] public BasketDto BasketItem { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }*/

    [Parameter]
    public ProductTypeView Product { get; set; }

    [Parameter]
    public EventCallback<ProductTypeView> OnProductSelected { get; set; }

    public async Task AddToBasketChanged()
    {
        Product.ProductsInUserBasket++;
        await OnProductSelected.InvokeAsync(Product);
        this.StateHasChanged();
    }

    public async Task RemoveBasketChanged()
    {
        var count = Product.ProductsInUserBasket--;
        if (count < 0)
        {
            Product.ProductsInUserBasket = 0;
        }
        await OnProductSelected.InvokeAsync(Product);
        this.StateHasChanged();
    }
}