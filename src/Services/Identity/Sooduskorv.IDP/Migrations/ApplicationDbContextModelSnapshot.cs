// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sooduskorv.IDP.Data;

namespace Sooduskorv.IDP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Identity.Data.Entities.UserClaimData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb0d22a8-82ae-4193-8808-5900a1a935e4"),
                            ConcurrencyStamp = "d4eb18cf-1a15-499f-8126-9061f9fd532f",
                            Type = "given_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Hanna"
                        },
                        new
                        {
                            Id = new Guid("0fdc425c-238e-434e-80b3-92b911e4699d"),
                            ConcurrencyStamp = "77f4f5bc-d6ea-42a6-a8f7-08e722e84c3d",
                            Type = "family_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Forest"
                        },
                        new
                        {
                            Id = new Guid("eec1a9cf-a1a7-44f8-a86a-8efc740dff2c"),
                            ConcurrencyStamp = "759cce95-ad9c-4f80-a461-e91d74b94e1f",
                            Type = "email",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "hanna@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d2eb807a-479a-4cc6-bd3f-5b95cbb21aa0"),
                            ConcurrencyStamp = "0be1e82f-2771-4e46-a474-f3482031b431",
                            Type = "address",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Tammsaare tee"
                        },
                        new
                        {
                            Id = new Guid("4699d3a1-285e-4e18-b5de-3adecdd2f1c2"),
                            ConcurrencyStamp = "0179af08-3b4c-47e7-b72c-566d1a458e72",
                            Type = "country",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "somevalue"
                        },
                        new
                        {
                            Id = new Guid("23177980-98f8-4665-a182-80eb5f9eacd3"),
                            ConcurrencyStamp = "8ee8c5eb-87aa-4be4-a323-83c7c169a00f",
                            Type = "given_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Bob"
                        },
                        new
                        {
                            Id = new Guid("c1be34c9-12fc-4586-abf4-f962699e8bd1"),
                            ConcurrencyStamp = "a6368173-b6e1-4d16-8b8c-bf9419ff7d1d",
                            Type = "family_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Oak"
                        },
                        new
                        {
                            Id = new Guid("8182e5f8-2ffa-48b4-b927-827db50c3922"),
                            ConcurrencyStamp = "165edc20-5885-4041-b718-ef846824b73e",
                            Type = "email",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "bob@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("715e1d47-d9f1-41c8-93c5-5a3733bce654"),
                            ConcurrencyStamp = "9cf2b87d-cfc9-495d-8843-4d3cb771c6fd",
                            Type = "address",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Ehitajate Tee"
                        },
                        new
                        {
                            Id = new Guid("302b6fba-9fcb-4584-9224-8ac17f9e485c"),
                            ConcurrencyStamp = "4bb46d84-dc2f-4beb-bccd-fd90d1191927",
                            Type = "country",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "somevalue"
                        });
                });

            modelBuilder.Entity("Identity.Data.Entities.UserData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Active = true,
                            ConcurrencyStamp = "43a1089d-7d9f-459b-933a-b972f8b74da4",
                            Password = "password",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "d860efca-22d9-47fd-8249-791ba61b07c7",
                            Username = "Hanna"
                        },
                        new
                        {
                            Id = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Active = true,
                            ConcurrencyStamp = "ddc2ed61-89ad-4fc6-884d-74712d8790c0",
                            Password = "password",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "b7539694-97e7-4dfe-84da-b4256e1ff5c7",
                            Username = "Bob"
                        });
                });

            modelBuilder.Entity("Identity.Data.Entities.UserClaimData", b =>
                {
                    b.HasOne("Identity.Data.Entities.UserData", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Data.Entities.UserData", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
